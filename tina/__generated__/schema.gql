# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  fiches(relativePath: String): Fiches!
  fichesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: FichesFilter): FichesConnection!
  lexique(relativePath: String): Lexique!
  lexiqueConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: LexiqueFilter): LexiqueConnection!
  personas(relativePath: String): Personas!
  personasConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PersonasFilter): PersonasConnection!
  home(relativePath: String): Home!
  homeConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HomeFilter): HomeConnection!
  mentionsLegales(relativePath: String): MentionsLegales!
  mentionsLegalesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: MentionsLegalesFilter): MentionsLegalesConnection!
}

input DocumentFilter {
  fiches: FichesFilter
  lexique: LexiqueFilter
  personas: PersonasFilter
  home: HomeFilter
  mentionsLegales: MentionsLegalesFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Fiches | Lexique | Personas | Home | MentionsLegales | Folder

type FichesValidations {
  rule: String
  maxValue: String
}

type Fiches implements Node & Document {
  _warning: String
  refID: String!
  title: String!
  createdAt: String
  updatedAt: String
  language: String!
  published: Boolean!
  _metadatas: String
  people: String!
  scope: String!
  responsible: [String!]!
  lifecycle: String!
  environmental_impact: String!
  priority_implementation: String!
  saved_resources: [String!]!
  _corps_de_la_fiche: String
  body: JSON!
  validations: [FichesValidations]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input HomeBodyTableTableRowsTableCellsFilter {
  value: RichTextFilter
}

input FichesBodyTableTableRowsFilter {
  tableCells: HomeBodyTableTableRowsTableCellsFilter
}

input FichesBodyTableFilter {
  firstRowHeader: BooleanFilter
  align: StringFilter
  tableRows: FichesBodyTableTableRowsFilter
}

input FichesBodyFilter {
  table: FichesBodyTableFilter
}

input FichesValidationsFilter {
  rule: StringFilter
  maxValue: StringFilter
}

input FichesFilter {
  _warning: StringFilter
  refID: StringFilter
  title: StringFilter
  createdAt: DatetimeFilter
  updatedAt: DatetimeFilter
  language: StringFilter
  published: BooleanFilter
  _metadatas: StringFilter
  people: StringFilter
  scope: StringFilter
  responsible: StringFilter
  lifecycle: StringFilter
  environmental_impact: StringFilter
  priority_implementation: StringFilter
  saved_resources: StringFilter
  _corps_de_la_fiche: StringFilter
  body: FichesBodyFilter
  validations: FichesValidationsFilter
}

type FichesConnectionEdges {
  cursor: String!
  node: Fiches
}

type FichesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [FichesConnectionEdges]
}

type Lexique implements Node & Document {
  _warning: String
  title: String!
  createdAt: String
  updatedAt: String
  language: String!
  published: Boolean!
  _corps_de_la_fiche: String
  body: JSON!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input LexiqueFilter {
  _warning: StringFilter
  title: StringFilter
  createdAt: DatetimeFilter
  updatedAt: DatetimeFilter
  language: StringFilter
  published: BooleanFilter
  _corps_de_la_fiche: StringFilter
  body: RichTextFilter
}

type LexiqueConnectionEdges {
  cursor: String!
  node: Lexique
}

type LexiqueConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [LexiqueConnectionEdges]
}

type Personas implements Node & Document {
  _warning: String
  title: String!
  createdAt: String
  updatedAt: String
  language: String!
  published: Boolean!
  _corps_de_la_fiche: String
  body: JSON!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PersonasFilter {
  _warning: StringFilter
  title: StringFilter
  createdAt: DatetimeFilter
  updatedAt: DatetimeFilter
  language: StringFilter
  published: BooleanFilter
  _corps_de_la_fiche: StringFilter
  body: RichTextFilter
}

type PersonasConnectionEdges {
  cursor: String!
  node: Personas
}

type PersonasConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PersonasConnectionEdges]
}

type Home implements Node & Document {
  _warning: String
  title: String!
  createdAt: String
  updatedAt: String
  language: String!
  published: Boolean!
  _corps_de_la_fiche: String
  body: JSON!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input HomeBodyCTAWithIconFilter {
  label: StringFilter
  url: StringFilter
  icon: StringFilter
}

input MentionsLegalesBodyTableTableRowsTableCellsFilter {
  value: RichTextFilter
}

input HomeBodyTableTableRowsFilter {
  tableCells: MentionsLegalesBodyTableTableRowsTableCellsFilter
}

input HomeBodyTableFilter {
  firstRowHeader: BooleanFilter
  align: StringFilter
  tableRows: HomeBodyTableTableRowsFilter
}

input HomeBodyFilter {
  CTAWithIcon: HomeBodyCTAWithIconFilter
  table: HomeBodyTableFilter
}

input HomeFilter {
  _warning: StringFilter
  title: StringFilter
  createdAt: DatetimeFilter
  updatedAt: DatetimeFilter
  language: StringFilter
  published: BooleanFilter
  _corps_de_la_fiche: StringFilter
  body: HomeBodyFilter
}

type HomeConnectionEdges {
  cursor: String!
  node: Home
}

type HomeConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HomeConnectionEdges]
}

type MentionsLegales implements Node & Document {
  _warning: String
  title: String!
  createdAt: String
  updatedAt: String
  language: String!
  published: Boolean!
  _corps_de_la_fiche: String
  body: JSON!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input MentionsLegalesBodyCTAWithIconFilter {
  label: StringFilter
  url: StringFilter
  icon: StringFilter
}

input MentionsLegalesBodyTableTableRowsFilter {
  tableCells: MentionsLegalesBodyTableTableRowsTableCellsFilter
}

input MentionsLegalesBodyTableFilter {
  firstRowHeader: BooleanFilter
  align: StringFilter
  tableRows: MentionsLegalesBodyTableTableRowsFilter
}

input MentionsLegalesBodyFilter {
  CTAWithIcon: MentionsLegalesBodyCTAWithIconFilter
  table: MentionsLegalesBodyTableFilter
}

input MentionsLegalesFilter {
  _warning: StringFilter
  title: StringFilter
  createdAt: DatetimeFilter
  updatedAt: DatetimeFilter
  language: StringFilter
  published: BooleanFilter
  _corps_de_la_fiche: StringFilter
  body: MentionsLegalesBodyFilter
}

type MentionsLegalesConnectionEdges {
  cursor: String!
  node: MentionsLegales
}

type MentionsLegalesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [MentionsLegalesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateFiches(relativePath: String!, params: FichesMutation!): Fiches!
  createFiches(relativePath: String!, params: FichesMutation!): Fiches!
  updateLexique(relativePath: String!, params: LexiqueMutation!): Lexique!
  createLexique(relativePath: String!, params: LexiqueMutation!): Lexique!
  updatePersonas(relativePath: String!, params: PersonasMutation!): Personas!
  createPersonas(relativePath: String!, params: PersonasMutation!): Personas!
  updateHome(relativePath: String!, params: HomeMutation!): Home!
  createHome(relativePath: String!, params: HomeMutation!): Home!
  updateMentionsLegales(relativePath: String!, params: MentionsLegalesMutation!): MentionsLegales!
  createMentionsLegales(relativePath: String!, params: MentionsLegalesMutation!): MentionsLegales!
}

input DocumentUpdateMutation {
  fiches: FichesMutation
  lexique: LexiqueMutation
  personas: PersonasMutation
  home: HomeMutation
  mentionsLegales: MentionsLegalesMutation
  relativePath: String
}

input DocumentMutation {
  fiches: FichesMutation
  lexique: LexiqueMutation
  personas: PersonasMutation
  home: HomeMutation
  mentionsLegales: MentionsLegalesMutation
}

input FichesValidationsMutation {
  rule: String
  maxValue: String
}

input FichesMutation {
  _warning: String
  refID: String
  title: String
  createdAt: String
  updatedAt: String
  language: String
  published: Boolean
  _metadatas: String
  people: String
  scope: String
  responsible: [String]
  lifecycle: String
  environmental_impact: String
  priority_implementation: String
  saved_resources: [String]
  _corps_de_la_fiche: String
  body: JSON
  validations: [FichesValidationsMutation]
}

input LexiqueMutation {
  _warning: String
  title: String
  createdAt: String
  updatedAt: String
  language: String
  published: Boolean
  _corps_de_la_fiche: String
  body: JSON
}

input PersonasMutation {
  _warning: String
  title: String
  createdAt: String
  updatedAt: String
  language: String
  published: Boolean
  _corps_de_la_fiche: String
  body: JSON
}

input HomeMutation {
  _warning: String
  title: String
  createdAt: String
  updatedAt: String
  language: String
  published: Boolean
  _corps_de_la_fiche: String
  body: JSON
}

input MentionsLegalesMutation {
  _warning: String
  title: String
  createdAt: String
  updatedAt: String
  language: String
  published: Boolean
  _corps_de_la_fiche: String
  body: JSON
}

schema {
  query: Query
  mutation: Mutation
}
