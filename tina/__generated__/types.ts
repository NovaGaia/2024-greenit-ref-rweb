//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  fiches: Fiches;
  fichesConnection: FichesConnection;
  lexique: Lexique;
  lexiqueConnection: LexiqueConnection;
  personnas: Personnas;
  personnasConnection: PersonnasConnection;
  mentionsLegales: MentionsLegales;
  mentionsLegalesConnection: MentionsLegalesConnection;
  home: Home;
  homeConnection: HomeConnection;
  siteData: SiteData;
  siteDataConnection: SiteDataConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFichesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFichesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<FichesFilter>;
};


export type QueryLexiqueArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLexiqueConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LexiqueFilter>;
};


export type QueryPersonnasArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPersonnasConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PersonnasFilter>;
};


export type QueryMentionsLegalesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMentionsLegalesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MentionsLegalesFilter>;
};


export type QueryHomeArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHomeConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HomeFilter>;
};


export type QuerySiteDataArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySiteDataConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteDataFilter>;
};

export type DocumentFilter = {
  fiches?: InputMaybe<FichesFilter>;
  lexique?: InputMaybe<LexiqueFilter>;
  personnas?: InputMaybe<PersonnasFilter>;
  mentionsLegales?: InputMaybe<MentionsLegalesFilter>;
  home?: InputMaybe<HomeFilter>;
  siteData?: InputMaybe<SiteDataFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Fiches | Lexique | Personnas | MentionsLegales | Home | SiteData | Folder;

export type FichesValidations = {
  __typename?: 'FichesValidations';
  rule?: Maybe<Scalars['String']['output']>;
  maxValue?: Maybe<Scalars['Float']['output']>;
};

export type Fiches = Node & Document & {
  __typename?: 'Fiches';
  _warning?: Maybe<Scalars['String']['output']>;
  refID: Scalars['String']['output'];
  title: Scalars['String']['output'];
  createdAt?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['String']['output']>;
  language: Scalars['String']['output'];
  published: Scalars['Boolean']['output'];
  _metadatas?: Maybe<Scalars['String']['output']>;
  people: Scalars['String']['output'];
  scope: Scalars['String']['output'];
  responsible: Array<Scalars['String']['output']>;
  lifecycle: Scalars['String']['output'];
  priority_implementation: Scalars['String']['output'];
  environmental_impact: Scalars['String']['output'];
  saved_resources: Array<Scalars['String']['output']>;
  _corps_de_la_fiche?: Maybe<Scalars['String']['output']>;
  body: Scalars['JSON']['output'];
  validations?: Maybe<Array<Maybe<FichesValidations>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type FichesValidationsFilter = {
  rule?: InputMaybe<StringFilter>;
  maxValue?: InputMaybe<NumberFilter>;
};

export type FichesFilter = {
  _warning?: InputMaybe<StringFilter>;
  refID?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DatetimeFilter>;
  updatedAt?: InputMaybe<DatetimeFilter>;
  language?: InputMaybe<StringFilter>;
  published?: InputMaybe<BooleanFilter>;
  _metadatas?: InputMaybe<StringFilter>;
  people?: InputMaybe<StringFilter>;
  scope?: InputMaybe<StringFilter>;
  responsible?: InputMaybe<StringFilter>;
  lifecycle?: InputMaybe<StringFilter>;
  priority_implementation?: InputMaybe<StringFilter>;
  environmental_impact?: InputMaybe<StringFilter>;
  saved_resources?: InputMaybe<StringFilter>;
  _corps_de_la_fiche?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
  validations?: InputMaybe<FichesValidationsFilter>;
};

export type FichesConnectionEdges = {
  __typename?: 'FichesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Fiches>;
};

export type FichesConnection = Connection & {
  __typename?: 'FichesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<FichesConnectionEdges>>>;
};

export type Lexique = Node & Document & {
  __typename?: 'Lexique';
  _warning?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  createdAt?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['String']['output']>;
  language: Scalars['String']['output'];
  published: Scalars['Boolean']['output'];
  _corps_de_la_fiche?: Maybe<Scalars['String']['output']>;
  body: Scalars['JSON']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type LexiqueFilter = {
  _warning?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DatetimeFilter>;
  updatedAt?: InputMaybe<DatetimeFilter>;
  language?: InputMaybe<StringFilter>;
  published?: InputMaybe<BooleanFilter>;
  _corps_de_la_fiche?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type LexiqueConnectionEdges = {
  __typename?: 'LexiqueConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Lexique>;
};

export type LexiqueConnection = Connection & {
  __typename?: 'LexiqueConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<LexiqueConnectionEdges>>>;
};

export type Personnas = Node & Document & {
  __typename?: 'Personnas';
  _warning?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  createdAt?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['String']['output']>;
  language: Scalars['String']['output'];
  published: Scalars['Boolean']['output'];
  _corps_de_la_fiche?: Maybe<Scalars['String']['output']>;
  body: Scalars['JSON']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PersonnasFilter = {
  _warning?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DatetimeFilter>;
  updatedAt?: InputMaybe<DatetimeFilter>;
  language?: InputMaybe<StringFilter>;
  published?: InputMaybe<BooleanFilter>;
  _corps_de_la_fiche?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PersonnasConnectionEdges = {
  __typename?: 'PersonnasConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Personnas>;
};

export type PersonnasConnection = Connection & {
  __typename?: 'PersonnasConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PersonnasConnectionEdges>>>;
};

export type MentionsLegales = Node & Document & {
  __typename?: 'MentionsLegales';
  _warning?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  createdAt?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['String']['output']>;
  language: Scalars['String']['output'];
  published: Scalars['Boolean']['output'];
  _corps_de_la_fiche?: Maybe<Scalars['String']['output']>;
  body: Scalars['JSON']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type MentionsLegalesFilter = {
  _warning?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DatetimeFilter>;
  updatedAt?: InputMaybe<DatetimeFilter>;
  language?: InputMaybe<StringFilter>;
  published?: InputMaybe<BooleanFilter>;
  _corps_de_la_fiche?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type MentionsLegalesConnectionEdges = {
  __typename?: 'MentionsLegalesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<MentionsLegales>;
};

export type MentionsLegalesConnection = Connection & {
  __typename?: 'MentionsLegalesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<MentionsLegalesConnectionEdges>>>;
};

export type Home = Node & Document & {
  __typename?: 'Home';
  _warning?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  createdAt?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['String']['output']>;
  language: Scalars['String']['output'];
  published: Scalars['Boolean']['output'];
  _corps_de_la_fiche?: Maybe<Scalars['String']['output']>;
  body: Scalars['JSON']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type HomeFilter = {
  _warning?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DatetimeFilter>;
  updatedAt?: InputMaybe<DatetimeFilter>;
  language?: InputMaybe<StringFilter>;
  published?: InputMaybe<BooleanFilter>;
  _corps_de_la_fiche?: InputMaybe<StringFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type HomeConnectionEdges = {
  __typename?: 'HomeConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Home>;
};

export type HomeConnection = Connection & {
  __typename?: 'HomeConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HomeConnectionEdges>>>;
};

export type SiteDataImage = {
  __typename?: 'SiteDataImage';
  url: Scalars['String']['output'];
  alt: Scalars['String']['output'];
};

export type SiteDataNetworks = {
  __typename?: 'SiteDataNetworks';
  url: Scalars['String']['output'];
  title: Scalars['String']['output'];
  icon: Scalars['String']['output'];
};

export type SiteData = Node & Document & {
  __typename?: 'SiteData';
  _warning?: Maybe<Scalars['String']['output']>;
  _seo?: Maybe<Scalars['String']['output']>;
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  titleTemplate?: Maybe<Scalars['String']['output']>;
  twitterUsername?: Maybe<Scalars['String']['output']>;
  fbPageUrl?: Maybe<Scalars['String']['output']>;
  image?: Maybe<SiteDataImage>;
  _footer?: Maybe<Scalars['String']['output']>;
  informations?: Maybe<Scalars['JSON']['output']>;
  networks?: Maybe<Array<Maybe<SiteDataNetworks>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type SiteDataImageFilter = {
  url?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
};

export type SiteDataNetworksFilter = {
  url?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type SiteDataFilter = {
  _warning?: InputMaybe<StringFilter>;
  _seo?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  titleTemplate?: InputMaybe<StringFilter>;
  twitterUsername?: InputMaybe<StringFilter>;
  fbPageUrl?: InputMaybe<StringFilter>;
  image?: InputMaybe<SiteDataImageFilter>;
  _footer?: InputMaybe<StringFilter>;
  informations?: InputMaybe<RichTextFilter>;
  networks?: InputMaybe<SiteDataNetworksFilter>;
};

export type SiteDataConnectionEdges = {
  __typename?: 'SiteDataConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<SiteData>;
};

export type SiteDataConnection = Connection & {
  __typename?: 'SiteDataConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SiteDataConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  updateFiches: Fiches;
  createFiches: Fiches;
  updateLexique: Lexique;
  createLexique: Lexique;
  updatePersonnas: Personnas;
  createPersonnas: Personnas;
  updateMentionsLegales: MentionsLegales;
  createMentionsLegales: MentionsLegales;
  updateHome: Home;
  createHome: Home;
  updateSiteData: SiteData;
  createSiteData: SiteData;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationUpdateFichesArgs = {
  relativePath: Scalars['String']['input'];
  params: FichesMutation;
};


export type MutationCreateFichesArgs = {
  relativePath: Scalars['String']['input'];
  params: FichesMutation;
};


export type MutationUpdateLexiqueArgs = {
  relativePath: Scalars['String']['input'];
  params: LexiqueMutation;
};


export type MutationCreateLexiqueArgs = {
  relativePath: Scalars['String']['input'];
  params: LexiqueMutation;
};


export type MutationUpdatePersonnasArgs = {
  relativePath: Scalars['String']['input'];
  params: PersonnasMutation;
};


export type MutationCreatePersonnasArgs = {
  relativePath: Scalars['String']['input'];
  params: PersonnasMutation;
};


export type MutationUpdateMentionsLegalesArgs = {
  relativePath: Scalars['String']['input'];
  params: MentionsLegalesMutation;
};


export type MutationCreateMentionsLegalesArgs = {
  relativePath: Scalars['String']['input'];
  params: MentionsLegalesMutation;
};


export type MutationUpdateHomeArgs = {
  relativePath: Scalars['String']['input'];
  params: HomeMutation;
};


export type MutationCreateHomeArgs = {
  relativePath: Scalars['String']['input'];
  params: HomeMutation;
};


export type MutationUpdateSiteDataArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteDataMutation;
};


export type MutationCreateSiteDataArgs = {
  relativePath: Scalars['String']['input'];
  params: SiteDataMutation;
};

export type DocumentUpdateMutation = {
  fiches?: InputMaybe<FichesMutation>;
  lexique?: InputMaybe<LexiqueMutation>;
  personnas?: InputMaybe<PersonnasMutation>;
  mentionsLegales?: InputMaybe<MentionsLegalesMutation>;
  home?: InputMaybe<HomeMutation>;
  siteData?: InputMaybe<SiteDataMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  fiches?: InputMaybe<FichesMutation>;
  lexique?: InputMaybe<LexiqueMutation>;
  personnas?: InputMaybe<PersonnasMutation>;
  mentionsLegales?: InputMaybe<MentionsLegalesMutation>;
  home?: InputMaybe<HomeMutation>;
  siteData?: InputMaybe<SiteDataMutation>;
};

export type FichesValidationsMutation = {
  rule?: InputMaybe<Scalars['String']['input']>;
  maxValue?: InputMaybe<Scalars['Float']['input']>;
};

export type FichesMutation = {
  _warning?: InputMaybe<Scalars['String']['input']>;
  refID?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  published?: InputMaybe<Scalars['Boolean']['input']>;
  _metadatas?: InputMaybe<Scalars['String']['input']>;
  people?: InputMaybe<Scalars['String']['input']>;
  scope?: InputMaybe<Scalars['String']['input']>;
  responsible?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  lifecycle?: InputMaybe<Scalars['String']['input']>;
  priority_implementation?: InputMaybe<Scalars['String']['input']>;
  environmental_impact?: InputMaybe<Scalars['String']['input']>;
  saved_resources?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  _corps_de_la_fiche?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
  validations?: InputMaybe<Array<InputMaybe<FichesValidationsMutation>>>;
};

export type LexiqueMutation = {
  _warning?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  published?: InputMaybe<Scalars['Boolean']['input']>;
  _corps_de_la_fiche?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PersonnasMutation = {
  _warning?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  published?: InputMaybe<Scalars['Boolean']['input']>;
  _corps_de_la_fiche?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type MentionsLegalesMutation = {
  _warning?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  published?: InputMaybe<Scalars['Boolean']['input']>;
  _corps_de_la_fiche?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type HomeMutation = {
  _warning?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['String']['input']>;
  language?: InputMaybe<Scalars['String']['input']>;
  published?: InputMaybe<Scalars['Boolean']['input']>;
  _corps_de_la_fiche?: InputMaybe<Scalars['String']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type SiteDataImageMutation = {
  url?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
};

export type SiteDataNetworksMutation = {
  url?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type SiteDataMutation = {
  _warning?: InputMaybe<Scalars['String']['input']>;
  _seo?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  titleTemplate?: InputMaybe<Scalars['String']['input']>;
  twitterUsername?: InputMaybe<Scalars['String']['input']>;
  fbPageUrl?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<SiteDataImageMutation>;
  _footer?: InputMaybe<Scalars['String']['input']>;
  informations?: InputMaybe<Scalars['JSON']['input']>;
  networks?: InputMaybe<Array<InputMaybe<SiteDataNetworksMutation>>>;
};

export type FichesPartsFragment = { __typename: 'Fiches', _warning?: string | null, refID: string, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _metadatas?: string | null, people: string, scope: string, responsible: Array<string>, lifecycle: string, priority_implementation: string, environmental_impact: string, saved_resources: Array<string>, _corps_de_la_fiche?: string | null, body: any, validations?: Array<{ __typename: 'FichesValidations', rule?: string | null, maxValue?: number | null } | null> | null };

export type LexiquePartsFragment = { __typename: 'Lexique', _warning?: string | null, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _corps_de_la_fiche?: string | null, body: any };

export type PersonnasPartsFragment = { __typename: 'Personnas', _warning?: string | null, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _corps_de_la_fiche?: string | null, body: any };

export type MentionsLegalesPartsFragment = { __typename: 'MentionsLegales', _warning?: string | null, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _corps_de_la_fiche?: string | null, body: any };

export type HomePartsFragment = { __typename: 'Home', _warning?: string | null, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _corps_de_la_fiche?: string | null, body: any };

export type SiteDataPartsFragment = { __typename: 'SiteData', _warning?: string | null, _seo?: string | null, title: string, description?: string | null, titleTemplate?: string | null, twitterUsername?: string | null, fbPageUrl?: string | null, _footer?: string | null, informations?: any | null, image?: { __typename: 'SiteDataImage', url: string, alt: string } | null, networks?: Array<{ __typename: 'SiteDataNetworks', url: string, title: string, icon: string } | null> | null };

export type FichesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type FichesQuery = { __typename?: 'Query', fiches: { __typename: 'Fiches', id: string, _warning?: string | null, refID: string, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _metadatas?: string | null, people: string, scope: string, responsible: Array<string>, lifecycle: string, priority_implementation: string, environmental_impact: string, saved_resources: Array<string>, _corps_de_la_fiche?: string | null, body: any, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, validations?: Array<{ __typename: 'FichesValidations', rule?: string | null, maxValue?: number | null } | null> | null } };

export type FichesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<FichesFilter>;
}>;


export type FichesConnectionQuery = { __typename?: 'Query', fichesConnection: { __typename?: 'FichesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'FichesConnectionEdges', cursor: string, node?: { __typename: 'Fiches', id: string, _warning?: string | null, refID: string, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _metadatas?: string | null, people: string, scope: string, responsible: Array<string>, lifecycle: string, priority_implementation: string, environmental_impact: string, saved_resources: Array<string>, _corps_de_la_fiche?: string | null, body: any, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, validations?: Array<{ __typename: 'FichesValidations', rule?: string | null, maxValue?: number | null } | null> | null } | null } | null> | null } };

export type LexiqueQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type LexiqueQuery = { __typename?: 'Query', lexique: { __typename: 'Lexique', id: string, _warning?: string | null, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _corps_de_la_fiche?: string | null, body: any, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type LexiqueConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LexiqueFilter>;
}>;


export type LexiqueConnectionQuery = { __typename?: 'Query', lexiqueConnection: { __typename?: 'LexiqueConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'LexiqueConnectionEdges', cursor: string, node?: { __typename: 'Lexique', id: string, _warning?: string | null, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _corps_de_la_fiche?: string | null, body: any, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type PersonnasQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PersonnasQuery = { __typename?: 'Query', personnas: { __typename: 'Personnas', id: string, _warning?: string | null, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _corps_de_la_fiche?: string | null, body: any, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PersonnasConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PersonnasFilter>;
}>;


export type PersonnasConnectionQuery = { __typename?: 'Query', personnasConnection: { __typename?: 'PersonnasConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PersonnasConnectionEdges', cursor: string, node?: { __typename: 'Personnas', id: string, _warning?: string | null, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _corps_de_la_fiche?: string | null, body: any, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type MentionsLegalesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type MentionsLegalesQuery = { __typename?: 'Query', mentionsLegales: { __typename: 'MentionsLegales', id: string, _warning?: string | null, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _corps_de_la_fiche?: string | null, body: any, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type MentionsLegalesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MentionsLegalesFilter>;
}>;


export type MentionsLegalesConnectionQuery = { __typename?: 'Query', mentionsLegalesConnection: { __typename?: 'MentionsLegalesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'MentionsLegalesConnectionEdges', cursor: string, node?: { __typename: 'MentionsLegales', id: string, _warning?: string | null, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _corps_de_la_fiche?: string | null, body: any, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type HomeQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HomeQuery = { __typename?: 'Query', home: { __typename: 'Home', id: string, _warning?: string | null, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _corps_de_la_fiche?: string | null, body: any, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type HomeConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HomeFilter>;
}>;


export type HomeConnectionQuery = { __typename?: 'Query', homeConnection: { __typename?: 'HomeConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HomeConnectionEdges', cursor: string, node?: { __typename: 'Home', id: string, _warning?: string | null, title: string, createdAt?: string | null, updatedAt?: string | null, language: string, published: boolean, _corps_de_la_fiche?: string | null, body: any, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type SiteDataQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SiteDataQuery = { __typename?: 'Query', siteData: { __typename: 'SiteData', id: string, _warning?: string | null, _seo?: string | null, title: string, description?: string | null, titleTemplate?: string | null, twitterUsername?: string | null, fbPageUrl?: string | null, _footer?: string | null, informations?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, image?: { __typename: 'SiteDataImage', url: string, alt: string } | null, networks?: Array<{ __typename: 'SiteDataNetworks', url: string, title: string, icon: string } | null> | null } };

export type SiteDataConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SiteDataFilter>;
}>;


export type SiteDataConnectionQuery = { __typename?: 'Query', siteDataConnection: { __typename?: 'SiteDataConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SiteDataConnectionEdges', cursor: string, node?: { __typename: 'SiteData', id: string, _warning?: string | null, _seo?: string | null, title: string, description?: string | null, titleTemplate?: string | null, twitterUsername?: string | null, fbPageUrl?: string | null, _footer?: string | null, informations?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, image?: { __typename: 'SiteDataImage', url: string, alt: string } | null, networks?: Array<{ __typename: 'SiteDataNetworks', url: string, title: string, icon: string } | null> | null } | null } | null> | null } };

export const FichesPartsFragmentDoc = gql`
    fragment FichesParts on Fiches {
  __typename
  _warning
  refID
  title
  createdAt
  updatedAt
  language
  published
  _metadatas
  people
  scope
  responsible
  lifecycle
  priority_implementation
  environmental_impact
  saved_resources
  _corps_de_la_fiche
  body
  validations {
    __typename
    rule
    maxValue
  }
}
    `;
export const LexiquePartsFragmentDoc = gql`
    fragment LexiqueParts on Lexique {
  __typename
  _warning
  title
  createdAt
  updatedAt
  language
  published
  _corps_de_la_fiche
  body
}
    `;
export const PersonnasPartsFragmentDoc = gql`
    fragment PersonnasParts on Personnas {
  __typename
  _warning
  title
  createdAt
  updatedAt
  language
  published
  _corps_de_la_fiche
  body
}
    `;
export const MentionsLegalesPartsFragmentDoc = gql`
    fragment MentionsLegalesParts on MentionsLegales {
  __typename
  _warning
  title
  createdAt
  updatedAt
  language
  published
  _corps_de_la_fiche
  body
}
    `;
export const HomePartsFragmentDoc = gql`
    fragment HomeParts on Home {
  __typename
  _warning
  title
  createdAt
  updatedAt
  language
  published
  _corps_de_la_fiche
  body
}
    `;
export const SiteDataPartsFragmentDoc = gql`
    fragment SiteDataParts on SiteData {
  __typename
  _warning
  _seo
  title
  description
  titleTemplate
  twitterUsername
  fbPageUrl
  image {
    __typename
    url
    alt
  }
  _footer
  informations
  networks {
    __typename
    url
    title
    icon
  }
}
    `;
export const FichesDocument = gql`
    query fiches($relativePath: String!) {
  fiches(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...FichesParts
  }
}
    ${FichesPartsFragmentDoc}`;
export const FichesConnectionDocument = gql`
    query fichesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: FichesFilter) {
  fichesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...FichesParts
      }
    }
  }
}
    ${FichesPartsFragmentDoc}`;
export const LexiqueDocument = gql`
    query lexique($relativePath: String!) {
  lexique(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...LexiqueParts
  }
}
    ${LexiquePartsFragmentDoc}`;
export const LexiqueConnectionDocument = gql`
    query lexiqueConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: LexiqueFilter) {
  lexiqueConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...LexiqueParts
      }
    }
  }
}
    ${LexiquePartsFragmentDoc}`;
export const PersonnasDocument = gql`
    query personnas($relativePath: String!) {
  personnas(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PersonnasParts
  }
}
    ${PersonnasPartsFragmentDoc}`;
export const PersonnasConnectionDocument = gql`
    query personnasConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PersonnasFilter) {
  personnasConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PersonnasParts
      }
    }
  }
}
    ${PersonnasPartsFragmentDoc}`;
export const MentionsLegalesDocument = gql`
    query mentionsLegales($relativePath: String!) {
  mentionsLegales(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...MentionsLegalesParts
  }
}
    ${MentionsLegalesPartsFragmentDoc}`;
export const MentionsLegalesConnectionDocument = gql`
    query mentionsLegalesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: MentionsLegalesFilter) {
  mentionsLegalesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...MentionsLegalesParts
      }
    }
  }
}
    ${MentionsLegalesPartsFragmentDoc}`;
export const HomeDocument = gql`
    query home($relativePath: String!) {
  home(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HomeParts
  }
}
    ${HomePartsFragmentDoc}`;
export const HomeConnectionDocument = gql`
    query homeConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HomeFilter) {
  homeConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HomeParts
      }
    }
  }
}
    ${HomePartsFragmentDoc}`;
export const SiteDataDocument = gql`
    query siteData($relativePath: String!) {
  siteData(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SiteDataParts
  }
}
    ${SiteDataPartsFragmentDoc}`;
export const SiteDataConnectionDocument = gql`
    query siteDataConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SiteDataFilter) {
  siteDataConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SiteDataParts
      }
    }
  }
}
    ${SiteDataPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      fiches(variables: FichesQueryVariables, options?: C): Promise<{data: FichesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FichesQueryVariables, query: string}> {
        return requester<{data: FichesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FichesQueryVariables, query: string}, FichesQueryVariables>(FichesDocument, variables, options);
      },
    fichesConnection(variables?: FichesConnectionQueryVariables, options?: C): Promise<{data: FichesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FichesConnectionQueryVariables, query: string}> {
        return requester<{data: FichesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FichesConnectionQueryVariables, query: string}, FichesConnectionQueryVariables>(FichesConnectionDocument, variables, options);
      },
    lexique(variables: LexiqueQueryVariables, options?: C): Promise<{data: LexiqueQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LexiqueQueryVariables, query: string}> {
        return requester<{data: LexiqueQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LexiqueQueryVariables, query: string}, LexiqueQueryVariables>(LexiqueDocument, variables, options);
      },
    lexiqueConnection(variables?: LexiqueConnectionQueryVariables, options?: C): Promise<{data: LexiqueConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LexiqueConnectionQueryVariables, query: string}> {
        return requester<{data: LexiqueConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LexiqueConnectionQueryVariables, query: string}, LexiqueConnectionQueryVariables>(LexiqueConnectionDocument, variables, options);
      },
    personnas(variables: PersonnasQueryVariables, options?: C): Promise<{data: PersonnasQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PersonnasQueryVariables, query: string}> {
        return requester<{data: PersonnasQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PersonnasQueryVariables, query: string}, PersonnasQueryVariables>(PersonnasDocument, variables, options);
      },
    personnasConnection(variables?: PersonnasConnectionQueryVariables, options?: C): Promise<{data: PersonnasConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PersonnasConnectionQueryVariables, query: string}> {
        return requester<{data: PersonnasConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PersonnasConnectionQueryVariables, query: string}, PersonnasConnectionQueryVariables>(PersonnasConnectionDocument, variables, options);
      },
    mentionsLegales(variables: MentionsLegalesQueryVariables, options?: C): Promise<{data: MentionsLegalesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MentionsLegalesQueryVariables, query: string}> {
        return requester<{data: MentionsLegalesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MentionsLegalesQueryVariables, query: string}, MentionsLegalesQueryVariables>(MentionsLegalesDocument, variables, options);
      },
    mentionsLegalesConnection(variables?: MentionsLegalesConnectionQueryVariables, options?: C): Promise<{data: MentionsLegalesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MentionsLegalesConnectionQueryVariables, query: string}> {
        return requester<{data: MentionsLegalesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MentionsLegalesConnectionQueryVariables, query: string}, MentionsLegalesConnectionQueryVariables>(MentionsLegalesConnectionDocument, variables, options);
      },
    home(variables: HomeQueryVariables, options?: C): Promise<{data: HomeQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomeQueryVariables, query: string}> {
        return requester<{data: HomeQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomeQueryVariables, query: string}, HomeQueryVariables>(HomeDocument, variables, options);
      },
    homeConnection(variables?: HomeConnectionQueryVariables, options?: C): Promise<{data: HomeConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomeConnectionQueryVariables, query: string}> {
        return requester<{data: HomeConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HomeConnectionQueryVariables, query: string}, HomeConnectionQueryVariables>(HomeConnectionDocument, variables, options);
      },
    siteData(variables: SiteDataQueryVariables, options?: C): Promise<{data: SiteDataQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteDataQueryVariables, query: string}> {
        return requester<{data: SiteDataQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteDataQueryVariables, query: string}, SiteDataQueryVariables>(SiteDataDocument, variables, options);
      },
    siteDataConnection(variables?: SiteDataConnectionQueryVariables, options?: C): Promise<{data: SiteDataConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteDataConnectionQueryVariables, query: string}> {
        return requester<{data: SiteDataConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SiteDataConnectionQueryVariables, query: string}, SiteDataConnectionQueryVariables>(SiteDataConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
  options?: { branch?: string }
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: { branch?: string },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    })

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
  options?: {
    branch?: string
  }
) => {
  const requester = generateRequester(client, options)
  return getSdk(requester)
}

  