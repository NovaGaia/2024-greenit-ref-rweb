---
import Seo from "@components/Seo.astro";
import { getLangFromUrl, useTranslations } from "@i18n/utils";
import Base from "@layouts/Base.astro";
import client from "@tina/__generated__/client";
import { getCollection, type CollectionEntry } from "astro:content";

// Pages props type
type Props = {
  entry: CollectionEntry<"lexique">;
};

// generate getStaticPaths (params, props) from collection
export async function getStaticPaths() {
  const entries = await getCollection("lexique");
  const paths = entries
    .filter((entry) =>
      import.meta.env.MODE === "development" ? "true" : entry.data.published,
    )
    .map((entry) => {
      const [lang, ...slug] = entry.slug.split("/");
      return {
        params: { lang, slug: slug.join("/") || undefined },
        props: { entry },
      };
    });

  return paths;
}
// export async function getStaticPaths() {
//   const entries = await getCollection("lexique");
//   const paths = entries
//     .filter((entry) => entry.slug.includes("/"))
//     .filter((entry) => entry.data.published)
//     .map((entry) => {
//       const [lang, ...slug] = entry.slug.split("/");
//       return {
//         params: { lang, slug: slug.join("/") || undefined },
//         props: { entry },
//       };
//     });

//   return paths;
// }

// Get entry activated by getStaticPaths
const { entry } = Astro.props;
let response: any = {};
try {
  await client.queries
    .lexique({
      relativePath: `/${entry.id}`,
    })
    .then((res) => {
      response = res;
    });
} catch (error) {
  // not in edit mode
}

// Use Astro Entry renderer
const { Content } = await entry.render();
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Base>
  <Seo title={t("Lexique")} slot="seo" />
  <Content />
</Base>
