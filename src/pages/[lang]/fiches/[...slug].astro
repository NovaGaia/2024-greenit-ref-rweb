---
import Seo from "@components/Seo.astro";
import FicheView from "@components/fiches/FicheView.astro";
import getMDXcomponents from "@components/mdx/getMDXcomponents";
import { TinaReactHelper as TinaHelper } from "@components/tinacms/react";
import { getLangFromUrl, useTranslations } from "@i18n/utils";
import Base from "@layouts/Base.astro";
import client from "@tina/__generated__/client";
import { getCollection, type CollectionEntry } from "astro:content";

// Pages props type
type Props = {
  entry: CollectionEntry<"fiches">;
  entries: CollectionEntry<"fiches">[];
  headings: any;
};

export async function getStaticPaths() {
  const entries = await getCollection("fiches");
  const paths = entries
    .filter((entry) => entry.data.published)
    .map((entry) => {
      const [lang, ...slug] = entry.slug.split("/");
      return {
        params: { lang, slug: slug.join("/") || undefined },
        props: { entry, entries },
      };
    });

  return paths;
}

const { entry } = Astro.props;

let response: any = {};
try {
  await client.queries
    .fiches({
      relativePath: `/${entry.id}`,
    })
    .then((res) => {
      response = res;
    });
} catch (error) {
  // not in edit mode
}

// Use Astro Entry renderer
const { Content, headings } = await entry.render();
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<Base>
  {
    response.data && import.meta.env.MODE === "development" && (
      <TinaHelper client:tina client:only tina={response} entry={entry} />
    )
  }
  <Seo title={entry.data.title} slot="seo" />
  <FicheView entry={entry} headings={headings}>
    <Content components={getMDXcomponents} />
  </FicheView>
</Base>
