---
import {
  capitalizeFirstLetter,
  getLangFromUrl,
  useTranslations,
} from "@i18n/utils";
import type { CollectionEntry } from "astro:content";
type Props = {
  entries: CollectionEntry<"fiches">[];
};
const { entries } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<table>
  <thead>
    <tr>
      <th>REF ID</th>
      <th>{t("scope")}</th>
      <th>{t("lifecycle")}</th>
      <th>{t("Bonnes pratiques")}</th>
      <th>{t("Principe de validation")}</th>
    </tr>
  </thead>
  <>
    {
      entries.map((entry) => {
        const [, ...entry_slug] = entry.slug.split("/");
        return (
          <>
            {entry.data.validations.map((validation, index) => {
              return (
                <tr>
                  <td>
                    <a href={`${entry_slug}`} class="text-sm no-underline">
                      ðŸ”—{" "}
                      <span class="underline">
                        {process.env.PUBLIC_REF_NAME} {entry.data.refID}{" "}
                      </span>
                    </a>
                  </td>
                  <td>{capitalizeFirstLetter(t(entry.data.scope as any))}</td>
                  <td>
                    {capitalizeFirstLetter(t(entry.data.lifecycle as any))}
                  </td>
                  <td>
                    {entry.data.title}{" "}
                    {entry.data.validations.length > 1 && `(${index + 1})`}
                  </td>
                  <td>
                    {t("Le nombre")}{" "}
                    <strong class="!text-primary">{validation.rule} </strong>
                    {t("est infÃ©rieur ou Ã©gal Ã ")}{" "}
                    <strong class="!text-primary">{validation.maxValue}</strong>
                  </td>
                </tr>
              );
            })}
          </>
        );
        return (
          <tr>
            <td>
              <a href={`${entry_slug}`} class="text-sm no-underline">
                ðŸ”—{" "}
                <span class="underline">
                  {process.env.PUBLIC_REF_NAME} {entry.data.refID}
                </span>
              </a>
            </td>
            <td>{capitalizeFirstLetter(t(entry.data.scope as any))}</td>
            {/*
              <td>{capitalizeFirstLetter(t(entry.data.lifecycle as any))}</td>
            */}
            <td>{entry.data.title}</td>
            <td>
              {/*
                    <span>{entry.data.validations.length}</span>
                */}
              {entry.data.validations.map((validation) => {
                return (
                  <>
                    {validation.rule} â‰¤ {validation.maxValue}
                    <br />
                  </>
                );
              })}
            </td>
          </tr>
        );
      })
    }
  </>
</table>
